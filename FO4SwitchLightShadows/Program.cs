using System;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Synthesis;

namespace FO4SwitchLightShadows
{
    public class Program
    {
        private static Lazy<Settings> _settings;
        private static Settings Settings => _settings.Value;
        
        public static async Task<int> Main(string[] args) => await SynthesisPipeline.Instance
            .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
            .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
            .SetTypicalOpen(GameRelease.Fallout4, "Shadow_Patch.esp")
            .Run(args);

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            foreach (var lightContext  in state.LoadOrder.PriorityOrder.Light().WinningContextOverrides())
            {
                var light = lightContext.Record;
                if(light is null || light.IsDeleted) continue;
                
                if(!string.IsNullOrEmpty(light.EditorID) && (light.EditorID.Contains("PipboyLight", StringComparison.OrdinalIgnoreCase) || light.EditorID.Contains("HeadlampLight", StringComparison.OrdinalIgnoreCase))) continue;

                var newRecord = light.DeepCopy();
                if (Settings.Mode == RunMode.AddShadows)
                {
                    if (!light.Flags.HasFlag(Light.Flag.NonShadowSpotlight)) continue;
                    
                    newRecord.Flags &= ~Light.Flag.NonShadowSpotlight;
                    newRecord.Flags |= Light.Flag.ShadowSpotlight;
                }
                else if (Settings.Mode == RunMode.RemoveShadows)
                {
                    if (!light.Flags.HasFlag(Light.Flag.ShadowSpotlight) &&
                        !light.Flags.HasFlag(Light.Flag.ShadowOmnidirectional)) continue;
                    
                    if (light.Flags.HasFlag(Light.Flag.ShadowSpotlight))
                    {
                        newRecord.Flags &= ~Light.Flag.ShadowSpotlight;
                        newRecord.Flags |= Light.Flag.NonShadowSpotlight;
                    }

                    if (light.Flags.HasFlag(Light.Flag.ShadowOmnidirectional))
                    {
                        newRecord.Flags &= ~Light.Flag.ShadowOmnidirectional;
                    }
                }
                
                if(newRecord.Flags != light.Flags) state.PatchMod.Lights.Set(newRecord);
            }
        }
    }
}